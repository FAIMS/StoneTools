    
/****** 
 FAIMS Logic Fail generated by Heurist Vsn 3.1.7, Friday 14th of February 2014 10:38:29 AM
 Database: hdb_alice_stonetools   Heurist user:Alice Buhrich
 ******/

User user; // dont touch
String userid;

setSyncEnabled(true);
setFileSyncEnabled(true);

showWarning("Thanks for trying this module!", "We have provided this module for Demonstration purposes only. You can customise the module yourself or we can help you. Contact info@fedarch.org for help.");
onEvent("control", "show", "refreshCollections()");
onEvent("control", "show", "refreshArtefacts()");
onEvent("control", "show", "refreshReports()");

/*** control ***/

// onEvent("control/artefact", "show", "refreshArtefacts()");

/*** ArchEnt: Artefact ***/
refreshArtefacts() {
    showToast("Fetching saved contexts...");
    populateList("control/artefact/ArtefactList", fetchEntityList("Artefact"));
}

onEvent("control/artefact/ArtefactList", "click", "loadArtefact()");

onEvent("Artefact/Artefact_Visual_interptretation/attachPhoto", "click", "attachPictureTo(\"Artefact/Artefact_Visual_interptretation/Photo\")");
onEvent("Artefact/Artefact_Visual_interptretation/attachDrawing", "click", "attachFileTo(\"Artefact/Artefact_Visual_interptretation/Drawing\")");
onEvent("Artefact/Artefact_Visual_interptretation/viewattached", "click", "viewArchEntAttachedFiles(entityId)");
onEvent("Artefact/Artefact_Visual_interptretation/Update", "delayclick", "saveArtefact()");
onEvent("Artefact/Artefact_Visual_interptretation/Delete", "delayclick", "deleteArtefact()");

String artefact_id = null;

newArtefact(){
    artefact_id = null;
    newTabGroup("Artefact");
    loadArtefactAttributes();
}
loadArtefact() {
    //newArtefact();
    artefact_id = getListItemValue();
    loadArtefactFrom(artefact_id);
}
loadArtefactFrom(entid) {
    
    artefact_id = entid;
    if (isNull(entid)) return;
    showToast(entid);
    showTabGroup("Artefact", entid);
    loadArtefactAttributes();
    updateAllArtefact(); 
    //updateRelns();
}

saveArtefact() {
    //todo - verify all required fields
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(artefact_id)) {
        entity = fetchArchEnt(artefact_id);
    }
    // first null is map data
    saveTabGroup("Artefact", artefact_id, null, null, "artefact_id = getLastSavedRecordId();");
}

deleteArtefact(){
    if (!isNull(artefact_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact!", "reallyDeleteArtefact()", "doNotDeleteArtefact()");
    }
}
reallyDeleteArtefact(){
    deleteArchEnt(artefact_id);
    cancelTabGroup("Artefact", false);
}
doNotDeleteArtefact(){
    showToast("Delete Cancelled.");
}       
 
loadArtefactAttributes(){

populateDropDown("Artefact/Artefact_Administrative/Artefact_Classification", makeVocab("Artefact Classification"));
populateRadioGroup("Artefact/Artefact_Administrative/Completeness", makeVocab("Completeness"));
populateDropDown("Artefact/Artefact_Description/Raw_material", makeVocab("Raw material"));
populateRadioGroup("Artefact/Artefact_Description/Location_of_raw_material", makeVocab("Location of raw material"));
populateDropDown("Artefact/Artefact_Axe_attributes/Axe_head_shape", makeVocab("Axe head shape"));
populateDropDown("Artefact/Artefact_Axe_attributes/Ground_edge_", makeVocab("Ground edge "));
populateDropDown("Artefact/Artefact_Axe_attributes/Waist", makeVocab("Waist"));
populateDropDown("Artefact/Artefact_Ooyurka_attributes/Shape_", makeVocab("Shape "));
populateRadioGroup("Artefact/Artefact_Ooyurka_attributes/Base", makeVocab("Base"));
populateRadioGroup("Artefact/Artefact_Ooyurka_attributes/Symmetry", makeVocab("Symmetry"));
populateRadioGroup("Artefact/Artefact_Nut_cracking_rock/Portablility", makeVocab("Portablility"));
populateDropDown("Artefact/Artefact_Pebble_attributes/Pebble_attributes", makeVocab("Pebble attributes"));
populateDropDown("Artefact/Artefact_Attributes_other/Attributes", makeVocab("Attributes"));
populateDropDown("Artefact/Artefact_Person_who_found_the_object/Activity", makeVocab("Activity"));
populateDropDown("Artefact/Artefact_Provenance/Locality", makeVocab("Locality"));
populateDropDown("Artefact/Artefact_Provenance/Landform_where_found", makeVocab("Landform where found"));
populateDropDown("Artefact/Artefact_Provenance/Geological_substrate", makeVocab("Geological substrate"));
populateRadioGroup("Artefact/Artefact_Preservation/Condition_of_object", makeVocab("Condition of object"));
populateDropDown("Artefact/Artefact_Preservation/How_is_the_item_stored", makeVocab("How is the item stored"));
}

updateAllArtefact(){
//load related records ?
}      

/*** ArchEnt: Collection ***/
// onEvent("control/collection", "show", "refreshCollections()");
refreshCollections() {
    showToast("Fetching saved contexts...");
    populateList("control/collection/CollectionList", fetchEntityList("Collection"));
}

onEvent("control/collection/CollectionList", "click", "loadCollection()");
onEvent("control/collection/newCollection", "click", "newCollection()");

onEvent("Collection/Collection_Location/attachThumbnail_image", "click", "attachPictureTo(\"Collection/Collection_Location_/Thumbnail_image\")");
onEvent("Collection/Collection_GeneralInformation/Update", "delayclick", "saveCollection()");
onEvent("Collection/Collection_Location/Update", "delayclick", "saveCollection()");
onEvent("Collection/Collection_Owner/Update", "delayclick", "saveCollection()");

onEvent("Collection/Collection_Artefacts/newArtefact", "click", "newArtefact()");

String collection_id = null;

newCollection(){
    collection_id = null;
    newTabGroup("Collection");
    loadCollectionAttributes();
}
loadCollection() {
    //newCollection();
    collection_id = getListItemValue();
    loadCollectionFrom(collection_id);
}
loadCollectionFrom(entid) {
    
    collection_id = entid;
    if (isNull(entid)) return;
    showToast(entid);
    showTabGroup("Collection", entid);
    loadCollectionAttributes();
    updateAllCollection(); 
    //updateRelns();
}

saveCollection() {
    //todo - verify all required fields
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(collection_id)) {
        entity = fetchArchEnt(collection_id);
    }
    // first null is map data
    saveTabGroup("Collection", collection_id, null, null, "collection_id = getLastSavedRecordId();");
}

deleteCollection(){
    if (!isNull(collection_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Collection!", "reallyDeleteCollection()", "doNotDeleteCollection()");
    }
}
reallyDeleteCollection(){
    deleteArchEnt(collection_id);
    cancelTabGroup("Collection", false);
}
doNotDeleteCollection(){
    showToast("Delete Cancelled.");
}       
 
loadCollectionAttributes(){
    populateDropDown("Collection/Collection_GeneralInformation/Identity", makeVocab("Identity"));
}

/*
    TODO: load artefacts linked to the collection
*/
updateAllCollection(){
    populateList("Collection/Collection_Artefacts/ArtefactList",  fetchEntityList("Artefact"));
//load related records ?
}      

/*** ArchEnt: Report ***/
// onEvent("control/report", "show", "refreshReports()");
refreshReports() {
    showToast("Fetching saved contexts...");
    populateList("control/report/ReportList", fetchEntityList("Report"));
}

onEvent("control/report/ReportList", "click", "loadReport()");

onEvent("Report/Report_Digital_versions/attachRelated_file", "click", "attachFileTo(\"Report/Report_Digital_versions/Related_file\")");
onEvent("Report/Report_Digital_versions/viewattached", "click", "viewArchEntAttachedFiles(entityId)");
onEvent("Report/Report_Digital_versions/Update", "delayclick", "saveReport()");
onEvent("Report/Report_Digital_versions/Delete", "delayclick", "deleteReport()");

String report_id = null;

newReport(){
    report_id = null;
    newTabGroup("Report");
    loadReportAttributes();
}
loadReport() {
    //newReport();
    report_id = getListItemValue();
    loadReportFrom(report_id);
}
loadReportFrom(entid) {
    
    report_id = entid;
    if (isNull(entid)) return;
    showToast(entid);
    showTabGroup("Report", entid);
    loadReportAttributes();
    updateAllReport(); 
    //updateRelns();
}

saveReport() {
    //todo - verify all required fields
    if (false){ 
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(report_id)) {
        entity = fetchArchEnt(report_id);
    }
    // first null is map data
    saveTabGroup("Report", report_id, null, null, "report_id = getLastSavedRecordId();");
}

deleteReport(){
    if (!isNull(report_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Report!", "reallyDeleteReport()", "doNotDeleteReport()");
    }
}
reallyDeleteReport(){
    deleteArchEnt(report_id);
    cancelTabGroup("Report", false);
}
doNotDeleteReport(){
    showToast("Delete Cancelled.");
}       
 
loadReportAttributes(){

}

updateAllReport(){
//load related records ?
}      

// MISC FUNCTIONS    

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;

    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

/*** Uneditable - you can edit the code below with extreme precaution ***/
/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname || ' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();



String username = "";
String device = "";

login(){
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");